/*
	Generated from  {{ Model.Resourceurl }}
*/

using System;
using System.Collections.Generic;
using RestSharp;

namespace {{ Model.Namespace }}
{
	/// <summary>
	/// {{ Model.Description }}
	/// </summary>
    [System.CodeDom.Compiler.GeneratedCode("dotswaggen", "v1")]
	public class {{ Model.Name }}
	{

		private IRestClient Client;

		public {{ Model.Name }}(string uri, string username, string password){
			Client = new RestClient(uri);
			Client.Authenticator = new HttpBasicAuthenticator(username, password);
		}

		public {{ Model.Name }}(IRestClient client) {
			Client = client;
		}

		public {{ Model.Name }}(string uri, IAuthenticator authenticator) {
			Client = new RestClient(uri);
			Client.Authenticator = authenticator;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		private static RestRequest GetNewRequest(string requestString, Method method)
		{
			return new RestRequest(requestString, method);
		}

	{% for api in Model.Apis -%}

		/// <summary>
		/// {{ api.Description }}
		/// </summary>
		#region {{ api.Path }}
			{% for operation in api.Operations -%}{% assign parameters = operation.Parameters | sort: 'required' -%}

			/// <summary>
			/// {{ operation.Description }}
			/// </summary>
			public {{ operation.Return_type }} {{ operation.Nickname }}({% for param in parameters -%} {{ param.Type }} {{ param.Name }}{% if forloop.last -%}{% else -%}, {% endif -%} {% endfor -%})
			{ 
				const string path = "{{ api.Path }}";
				var request = GetNewRequest(path, Method.{{ operation.Method }});
			{% for param in parameters %}
				{% if param.Location == "Path" %}request.AddUrlSegment("{{ param.Name }}", {{ param.Name }}{% if param.Type != "string" %}.ToString(){% endif %});
				{% elsif  param.Location == "Query" %}request.AddParameter("{{ param.Name }}", {{ param.Name }}{% if param.Type != "string" %}.ToString(){% endif %}, ParameterType.QueryString);
				{% elsif  param.Location == "Body" %}request.AddBody({{ param.Name }});{% endif %}
			{% endfor -%}
			{% if operation.Return_type == "void" %}
				var response = Client.Execute(request);
				if((int)response.StatusCode >= 200 && (int)response.StatusCode < 300)
					return;
			{% else %}
				var response = Client.Execute<{{ operation.Return_type }}>(request);
				if((int)response.StatusCode >= 200 && (int)response.StatusCode < 300)
					return response.Data;
			{% endif %}
				
	
				switch((int)response.StatusCode)
				{
				{% for response in operation.Responses -%}
					case {{ response.Code }}:
					throw new Exception(string.Format("{0}: {1}", {{ response.Code }}, "{{ response.Message }}"));
				{% endfor -%}
					default:
						// Unknown server response
						throw new Exception(string.Format("Unknown response code {0}", response.StatusCode.ToString()));
				}
			}
			{% endfor -%}
		#endregion
	{% endfor -%}
	}
}